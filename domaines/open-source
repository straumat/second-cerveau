---
title: L'Open Source
menuTitle: Technologie - Open Source
---

_Une grande partie de ce que j'ai pu comprendre sur l'open source est tirée du
livre [Working in Public: The Making and Maintenance of Open Source Software](https://t.co/6vv64n9R60)._

## Comment les solutions open source sont produites aujourd'hui ?

On est sur un cycle qui pourrait se résumer de la façon suivante :

- Des développeurs écrivent du code et le publie (généralement sur Github).
- Cela leur plait, mais au bout de quelques mois ou années, il y a une baisse de popularité et d'intérêt.
- Si le coût de maintenance dépasse la récompense, les développeurs arrêtent le projet.

Désormais, la norme pour un projet Open Source, c'est peu de développeurs qui font l'essentiel du travail et beaucoup de
petits contributeurs qui vont et viennent. Sur Github, moins de 5% des développeurs sont responsables de 95% du code et
des interactions sociales. Ceci est en partie dû au fait qu'avec sa standardisation des projets et des outils, Github a
abaissé la barrière d'entrée.

Le problème des mainteneurs aujourd'hui est de gérer un volume important de petites interactions. Cela ressemble moins à
la gestion d'une communauté qu'à la gestion d'un trafic aérien.

L'idée que l'open source est une communauté qui collabore fait penser à beaucoup de mainteneurs solos que s'ils sont
seuls, c'est qu'un truc cloche... C'est faux, on est dans un modèle de communautés centralisées où un petit groupe est
capable d’attirer beaucoup de monde.

On sort aujourd'hui de la définition des commons par Ostrom. La plupart des développeurs interagissent faiblement avec
les autres, sur plusieurs projets avec peu d’intérêt sur le long terme.

De la même façon qu'il y a des influenceurs Instagram, des streamers sur Twitch, il y a désormais des développeurs sur
Github. Et comme sur les autres plateformes, la réputation d'un créateur est comme une batterie, on suit un créateur,
car on s'attend à du contenu. Si le créateur arrête de créer, ses fans vont s'ennuyer et partir. Une réputation, comme
un logiciel, nécessite de la maintenance.

Github, comme Twitter, Youtube ou Instagram, a facilité aux producteurs la production et la distribution de ce qu'ils
font.

## La structure d'un projet Open Source

Il n'y a pas de communauté Open Source, Open source signifie juste la façon dont s'est distribué, mais ne dit rien de
comment le logiciel est produit. Chaque projet Open Source va développer ses propres normes et sa propre culture.

Vous ne pouvez pas passer d'un projet à un autre et vous attendre à y voir la même chose. Vous vous trouvez à chaque
fois face à un nouveau "monde" dont vous devez comprendre le fonctionnement.

## Les étapes d'un projet Open Source

### Création

Tous les projets Open Source démarrent avec peu de développeurs, souvent une seule personne. La plupart du temps, avant
la première version, le code est privé (et donc non partagé) ce qui permet de travailler sereinement avant de demander
des retours.

### Évangélisme

Une fois le projet "sorti", les développeurs ont généralement très envie d'avoir des retours, des demandes, des ajouts
de code... le projet va être promu de la même façon que l'on fait la promotion d'une startup (twitter, reddit,
producthunt...).

L'objectif à ce moment est d'avoir un maximum de développeurs qui utilisent le code produit. On va aussi demander des
contributions (en code) tout en gardant le contrôle de la direction du projet.

### Croissance

Quand le projet croit, les créateurs se retrouvent à faire moins de code et vont passer plus de temps à répondre aux
questions, corriger les bugs, relire des contributions... Attention, cela ne signifie absolument pas que vous aurez plus
de contributions intéressantes au code de votre solution ou que plus de gens vous aideront à corriger les bugs.

## Classer un projet Open Source

On peut classer un projet open source avec quatre critères:

- **La portée technique** : Un projet qui semble avoir toutes les fonctionnalités requises attirera peu de nouveaux
  contributeurs. Il peut être très utilisé, mais il peut y avoir peu de choses à faire. Par exemple : Webpack.
- **Le besoin de support** : Le support correspond à répondre aux gens, traiter les demandes, relire le code des
  autres... Les contributeurs ont surtout envie d'écrire du code intéressant, pas de faire du triage de bugs. Par
  exemple, Youtube-dl est un projet assez simple avec peu de code, mais il y a énormément de demande de support.
- **La facilité de participation** : Quelle est la difficulté de contribuer à un projet pour un nouveau venu ? Est-ce un
  langage connu ? Est-ce bien documenté ? La communauté est-elle sympa ? les mainteneurs du projet sont ils disponibles
  ?
- **Nombre d'utilisateurs** : La portée du projet, c'est-à-dire quel est le potentiel de personnes qui pourraient être
  contributeurs ? Ceci est généralement une fonction du nombre de personnes qui pourraient utiliser l'application.

À partir de là, on se retrouve avec quatre grands types de projets:

- **Fédérations** : Ce sont des projets avec une croissance forte des utilisateurs et des contributeurs. On y trouve des
  projets comme Linux, Node.js ou Rust. Ces projets ressemblent à des entrepises et sont complexes à gérer ce qui les
  pousse à mettre en place des votes, des groupes de travail, des fondations...
- **Clubs** : Ce sont des projets avec une croissance forte des contributeurs, mais une croissance faible des
  utilisateurs. Astropy qui fournit des outils Python aux astronomes est un exemple. Ce projet va avoir peu
  d'utilisateurs, mais ceux-ci ont de bonnes chances de pouvoir être des contributeurs actifs. Ce sont un peu comme des
  meetups ou des associations.
- **Jouets**

## La maintenance des projets Open source

Un des plus gros problèmes est justement la “maintenance” du code. Beaucoup de développeurs qui ont pris du plaisir à
créer un produit, n’ont pas forcément de patience pour le travail de maintenance. Et les nouveaux contributeurs
préfèrent bosser sur de nouvelles fonctionnalités que de corriger des bugs.

Si vous décorez votre maison à noël, vous pouvez y prendre beaucoup de plaisir et trouver cela gratifiant que les gens
trouve cela beau. Si vos voisins tapent à votre porte tous les jours pour vous faire des suggestions ou demander des
modifications, vous aller vous lasser.

“Creation is an intrinsic motivator, maintenance usually requires extrinsic motivation.”

Accepter de l'aide n'est pas non plus évident, sur mes projets, j'ai parfois reçu des contributions de "mauvaise
qualité" ce qui nécessite d'avoir des interactions sociales par forcément agréable quand il s'agit d'expliquer à quelqu'
un que l'on refuse son travail, car il n'est pas au niveau. Je n'avais pas clairement pas l'énergie pour former toutes
les personnes qui passaient sur le projet et qui montraient un peu d'intérêt, qui était, dans la grande majorité des
cas, temporaire.

## L'open source permet-il de produire de meilleures solutions ?

Il y a une très bonne explication de pourquoi les projets open source produisent souvent de meilleures solutions que les
entreprises: Grâce à la motivation des individus, les coûts de coordination sont bien plus bas (Benkler).

## L'économie de l'Open Source

Bien que de plus en plus de personnes et d'entreprises utilisent de l'open source, les développeurs n'arrivent pas à
capturer la valeur économique qu'ils créent.